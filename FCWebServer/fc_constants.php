<?php
/**
 * Constants.php
 *
 * This file is intended to group all constants to
 * make it easier for the site administrator to tweak
 * the login script.
 *
 *
 * (C) Copyright Freeway Coffee, 2011,2012,2013
 * 
 */
 
/**
 * Database Constants - these constants are required
 * in order for there to be a successful connection
 * to the MySQL database. Make sure the information is
 * correct.
 */

require_once("fc_db.php");
    
    
/**
 * Database Table Constants - these constants
 * hold the names of all the database tables used
 * in the script.
 */
define("TBL_USERS", "users");

/**
 * Special Names and Level Constants - the admin
 * page will only be accessible to the user with
 * the admin name and also to those users at the
 * admin user level. Feel free to change the names
 * and level constants as you see fit, you may
 * also add additional level specifications.
 * Levels must be digits between 0-9.
 */
define("ADMIN_NAME", "god");
//define("GUEST_NAME", "Guest");
define("ADMIN_LEVEL", 9);
define("USER_LEVEL",  1);
define("GUEST_LEVEL", 0);
define("INITIAL_FREE_DRINKS",0);
	


/**
 * Timeout Constants - these constants refer to
 * the maximum amount of time (in minutes) after
 * their last page fresh that a user and guest
 * are still considered active visitors.
 */
define("USER_TIMEOUT", 10);


/**
 * Cookie Constants - these are the parameters
 * to the setcookie function call, change them
 * if necessary to fit your website. If you need
 * help, visit www.php.net for more info.
 * <http://www.php.net/manual/en/function.setcookie.php>
 */
define("COOKIE_EXPIRE", 60*60*24*100);  //100 days by default
define("COOKIE_PATH", "/");  //Avaible in whole domain

/**
 * Email Constants - these specify what goes in
 * the from field in the emails that the script
 * sends to users, and whether to send a
 * welcome email to newly registered users.
 */
define("EMAIL_FROM_NAME", "Freeway Coffee");
define("EMAIL_FROM_ADDR", "\"Freeway Coffee\" <info@freewaycoffee.com>");
define("DEBUG_EMAIL_FROM_ADDR","\"Freeway Coffee\" <limeyx@gmail.com>");
define("EMAIL_WELCOME", true);

define("DEFAULT_TZ","America/Los_Angeles");
	
define("REG_RESPONSE_FAIL_EMAIL",0);
define("REG_RESPONSE_FAIL_OTHER_RETRY",1);
define("REG_RESPONSE_REGISTER_ONLY",2);
define("REG_RESPONSE_REGISTER_SIGNIN",3);
define("REG_RESPONSE_VERSION",4); // Version Mismatch
define("REG_RESPONSE_INTERNAL",5); // Internal error

define("BOOL_YES",1);
define("BOOL_NO",0);
	
define ("USER_SIGNIN_OK","User Signon OK");
define ("USER_SIGNIN_FAIL","User Signon Failed");

    // Increment this if we somehow break user item processing and have to rev the app :(
define ("USER_ITEMS_COMPAT_LEVEL",4);

define("LOG_CODE_ERROR",0);
define("LOG_CODE_SUCCESS",1);
define("LOG_CODE_INFO",2);

    // MAIN_COMPAT is generated by Signon and Signup. A very crude way to do it.
define ("MAIN_COMPAT_LEVEL",10);
define ("MAIN_COMPAT_RELEASE_ANDROID","1.1.0");
define ("MAIN_COMPAT_RELEASE_IOS","1.1.0");


define ("PW_MAX_LEN",72);
define ("PW_MIN_LEN",20);

    
define ("DEFAULT_DATE_TIME_FORMAT",'Y-m-d H:i:s');
define ("DEFAULT_DATE_ONLY_FORMAT",'Y-m-d');

define ("GS_ALLOW_SIGNIN","allow_signin");

define ("FREE_DRINK_ALT_AMOUNT","5.00"); // It's 1 free drink, *or* this amount


define ("ORDER_TYPE_IN_PROGRESS",0);
define ("ORDER_TYPE_PROCESSED",1);

    define ("NONE_TEXT","None");
    define ("COMPAT_LEVEL_ATTR","compat_level");
    
    define ("IS_ACTIVE_ATTR","is_act");
    
    // Global to avoid head-twisting require loops ?
    define ("MENU_ID_ATTR","m_id");
    
    class EnumFetchActive
    {
    	//private $val;
    	
    	const FETCH_ACTIVE_ONLY =0;
     	const FETCH_ACTIVE_AND_INACTIVE=1;
     	const FETCH_INACTIVE_ONLY=2;
     	
     	/*
     	private function __construct($val)
     	{
     		$this->val = $val;
     	}
     	
     	public static function FETCH_ACTIVE_ONLY()
     	{
     		return new EnumFetchActive(e_FETCH_ACTIVE_ONLY);
     	}
     	
     	public static function FETCH_ACTIVE_AND_INACTIVE()
     	{
     		return new EnumFetchActive(e_FETCH_ACTIVE_AND_INACTIVE);
     	}
     	*/
    };
    
    define ("INPROGRESS_ORDERS_TABLE_NAME_PREFIX","ip_orders");
    define ("ORDERS_TABLE_NAME_PREFIX","orders");
    
    define("DEFAULT_TIME_TO_LOCATION",10);
    
    define("DB_USER_UNLOCKED",0);
    define("DB_USER_LOCKED",1);
    
    define("LOG_CAT_UNKNOWN",0);
    define("LOG_CAT_ORDER",1);
    define("LOG_CAT_INTERNAL",2);
    define("LOG_CAT_EMAIL",3);
    define("LOG_CAT_DB_APP_SYNC",4); // Log if App and Server are (even temporarily) out of sync.
    define("LOG_CAT_STORE_CLOSED",5);
    
    define ("APP_CLIENT_TYPE","app_client");
    
    define ("APP_CLIENT_OS_VALUE_UNKNOWN_NUMBER",0);
    define ("APP_CLIENT_OS_VALUE_ANDROID_NUMBER",1);
    define ("APP_CLIENT_OS_VALUE_IOS_NUMBER",2);
    define ("APP_CLIENT_OS_VALUE_WEB_NUMBER",3);
    		
    define("APP_CLIENT_VALUE_ANDROID","android");
    define("APP_CLIENT_VALUE_IOS","apple_ios");
    define("APP_CLIENT_VALUE_UNKNOWN","unknown");
    
    
    define("ANDROID_PHONE_MODEL","phone_model");
    define("ANDROID_VERSION","android_version");
    define("ANDROID_PHONE_MANUF","phone_manuf");
    define("ANDROID_PHONE_PRODUCT","phone_product");
    
    define ("IOS_DEVICE_NAME","ios_device_name");
    define ("IOS_DEVICE_SYS_NAME","ios_device_sys_name");
    define ("IOS_DEVICE_SYS_VER","ios_device_sys_ver");
    define ("IOS_DEVICE_MODEL","iod_device_model");
    
    define("IOS_APP_VER_NAME_STRING","ios_app_ver_name");
    define("IOS_APP_BUILD_STRING","ios_app_build");
    
    
    define("FC_VERSION_NAME","version_name");
    define("FC_VERSION_NUM","version_num");
    
    
    define ("USER_NORMAL",0);
    define ("USER_ADMIN",1);
    define ("USER_SUPER",2);
    
    define ("RESULT_ATTR","result");
    define ("COMMAND_SUCCESS","ok");
    define ("COMMAND_FAILED","failed");
    
    
    // App Settings (things about the apps we want to control from the server in order to avoid waiting for app store updates)
    define ("APP_SETTING_LIST_TAG","app_setting_list");
    define ("APP_SETTING_TAG","app_setting");
    define ("APP_SETTING_NAME_ATTR","app_set_name");
    define ("APP_SETTING_VALUE_ATTR","app_set_val");
    
    // Object Responses
    define ("OBJECT_NONE_VERSION",0); // No object can have this version
   	define ("OBJECT_RESPONSE_ATTR","object_response");
		 
	// The last version number (used with object need new but not included)
	define ("OBJECT_RESPONSE_LATEST_VER_ATTR","object_latest_ver");
	// You need a new one but its not included
	define ("OBJECT_RESPONSE_NEED_NEW","object_need_new");
	// You need a new one and its included
	define ("OBJECT_RESPONSE_OBJ_INCLUDED","object_included");
	// Object does not exist
	define ("OBJECT_RESPONSE_NOT_EXIST","object_not_exist");
	// You already have the latest
	define ("OBJECT_RESPONSE_HAVE_LATEST","object_have_latest");
		 
    
    // COMMANDS
    define("USER_COMMAND","user_command");
    define("OM_USER_COMMAND","om_user_command");
    
    define("ADD_USER_FEEDBACK_COMMAND","user_feedback");
    define("UPDATE_PAYMENT_METHOD_COMMAND","update_pay_method");
    define("UPDATE_PAYMENT_METHOD_COMMAND_RESPONSE_TAG","update_pay_method_resp");
    
    define ("UPDATE_CREDIT_CARD_USE_FOR_PAY_CMD","update_credit_card_use_pay");
    define ("UPDATE_CREDIT_CARD_CMD","update_credit_card");
    
    define ("USER_ORDER_RESPONSE_TAG","user_order_response");
    
    // Always gets
    define("GET_MENU_CMD","get_menu");
    // If menu version is included, will only get if out of date
    define("GET_MENU_IF_NEED","get_menu_if_needed");
    
    // Always gets
    define("GET_MENU_FOR_USER_CMD","get_menu_for_user");
    // If menu version is included, will only get if out of date
    define("GET_MENU_FOR_USER_IF_NEED","get_menu_for_user_if_needed");
    
    
    // COMMAND PARAMS
    define ("MENU_ID_CMD_PARAM","menu_id");
    define ("MENU_HAVE_VERSION_CMD_ARG","menu_have_version");
    
    define("OM_LOCATION_ID_CMD_PARAM","location_id");
    define("OM_ORDER_ID_CMD_PARAM","order_id");
    define("USER_COMMAND_UPDATE_LOCATION_OPEN_MODE","update_loc_open_mode");
    
    define("OM_TIMESTAMP_CMD_PARAM","ts");
    define("OM_GLOBAL_ORDER_TAG_CMD_PARAM","o_tag");
    
    define("OM_ORDER_DELIVER_CMD_PARAM","order_delivered");
    define("OM_ORDER_NOSHOW_CMD_PARAM","order_noshow");
    define("OM_ORDER_REFUND_CMD_PARAM","order_refund");
    
    define ("USER_INCARNATION_CMD_ARG","u_inc");
    define ("USER_LOCATION_INCARNATION_CMD_ARG","u_loc_inc");
    
    define ("USER_ADD_DRINK_TAG","user_add_drink");
    define ("USER_EDIT_DRINK_TAG","user_edit_drink");
    
    define("USER_ARRIVE_MODE_CMD_ARG","user_arrive_mode");
    define("PARTID","partid_");
    define("SORT_ORDER_ATTR","so");
    
    define("DB_TABLE_USER_DRINK_OPTIONS","user_drink_options");
    define("DB_TABLE_ORDERS_USER_ITEMS_OPTIONS","orders_user_items_options");

    // Credit Cards

    // Delete CREDIT CARD
    
    define ("DELETE_CREDIT_CARD","d_c_c");
    
    define ("CREDIT_CARD_ID_CMD_PARAM","d_c_c_id");
    
    // USER ITEMS
    define ("DB_USER_ITEM_CLASS_ALL",-1);
    define ("DB_USER_ITEM_CLASS_DRINK",0);
    define ("DB_USER_ITEM_CLASS_FOOD",1);
   
    define ("USER_ID_ATTR","user_id");
    define ("LOCATION_ID_ATTR","location_id");
    		
    // Location Open Mode
    define ("DB_LOCATION_OPEN_MODE_FORCE_CLOSED",0);
    define ("DB_LOCATION_OPEN_MODE_FORCE_OPEN",1);
    define ("DB_LOCATION_OPEN_MODE_OBEY_HOURS",2);
    
    define("ARRIVE_MODE_CAR",0);
    define("ARRIVE_MODE_WALKUP",1);
    
    define("ARRIVE_MODE_CAR_STR","0");
    define("ARRIVE_MODE_WALKUP_STR","1");
    
    define ("COMPAT_LEVEL_ATTR","compat_level");
    		
    // User Drink
    define ("USER_DRINK_TAG","u_d");
    define("USER_DRINK_OPTION_LIST_TAG","ud_ol");
    
    
    define ("USER_DRINK_OPTIONS_TEXT_ATTR","u_d_o");
    define ("USER_DRINK_TYPE_NAME_ATTR","u_d_dtn");
    define ("USER_DRINK_NAME_ATTR","u_d_dn");
    define ("USER_DRINK_EXTRA_ATTR","u_d_e");
    define ("USER_DRINK_DRINK_TYPE_ATTR","u_d_dt");
    define ("USER_DRINK_INCLUDE_DEFAULT_ATTR","u_d_id");
    define ("USER_DRINK_COST_ATTR","u_d_c");
    define ("USER_DRINK_ITEM_TYPE_ATTR","u_d_i");
    
    // User Drink Option
    define ("USER_DRINK_OPTION_TAG","udo");
    
    define ("USER_DRINK_OPTION_USER_DRINK_ID_ATTR","udo_udi");
    define ("USER_DRINK_OPTION_DRINK_TYPES_OPTION_ID_ATTR","udo_dtoi");
    define ("USER_DRINK_OPTION_DRINK_OPTION_ID_ATTR","udo_doi");
    define ("USER_DRINK_OPTION_DRINK_OPTION_GROUP_ID_ATTR","udo_dogi");
    define ("USER_DRINK_OPTION_COUNT_ATTR","udo_c");

    // FEEDBACK
    define("FEEDBACK_GENERAL_ID",0);
    define("FEEDBACK_LOGIN_ID",1);
    define("FEEDBACK_BILLING_ID",2);
    define("FEEDBACK_BUG_ID",3);
    define("FEEDBACK_SUGGESTION_ID",4);
    
    // TODO Replace with a real array ? or key/value array.
    define("FEEDBACK_GENERAL_TEXT","General");
    define("FEEDBACK_LOGIN_TEXT","Signin");
    define("FEEDBACK_BILLING_TEXT","Billing");
    define("FEEDBACK_BUG_TEXT","Bug");
    define("FEEDBACK_SUGGESTION_TEXT","Suggestion");
    define("FEEDBACK_UNKNOWN_TEXT","Unknown");
    
    // DRINK TYPES
    define("DRINK_TYPES_LIST_TAG","d_t_l");
    define("DRINK_TYPE_TAG","d_t");
    
    define("DRINK_TYPE_LONG_DESCR_ATTR","d_t_ld");
   	define("DRINK_TYPE_TEXT","d_t_t");
   	define("DRINK_TYPE_BASE_COST_ATTR","d_t_bc");
   	define("DRINK_TYPE_ITEM_GROUP_ATTR","d_t_ig"); // Logical grouping (Organics, Drink, Entree, Dinner, Pizza etc)
   	define("DRINK_TYPE_TYPE_ID_ATTR","d_t_it"); // Inherent type (Drink, Food, Candy etc.)
   	
   	
    // DRINK OPTION GROUPS
   	define("DRINK_OPTION_GROUPS_LIST_TAG","d_o_g_l");
   	define("DRINK_OPTION_GROUP_TAG","d_o_g");
   	define("DRINK_OPTION_GROUP_PART_NAME_ATTR","d_o_g_pn");
   	define("DRINK_OPTION_GROUP_LONG_NAME_ATTR","d_o_g_ln");
   	define("DRINK_OPTION_GROUP_MULTISELECT_ATTR","d_o_g_ms");
   	
   	// DRINK OPTIONS
   	define("DRINK_OPTIONS_LIST_TAG","d_o_l");
   	define("DRINK_OPTION_TAG","d_o");
   	define("DRINK_OPTION_NAME_ATTR","d_on");
   	define("DRINK_OPTION_GROUP_ID","d_ogr");
   	
    // DRINK TYPE OPTIONS LIST
   	define("DRINK_TYPE_OPTIONS_LIST_TAG","d_t_o_l");
   	define("DRINK_TYPE_OPTION_TAG","X");
   	
   	define("DRINK_TYPES_OPTION_DRINK_OPTION_ID_ATTR","Xb");
   	define("DRINK_TYPES_OPTION_DRINK_OPTION_GROUP_ID_ATTR","Xc");
   	define("DRINK_TYPES_OPTION_DRINK_TYPE_ID_ATTR","Xa");
   	define("DRINK_TYPES_OPTION_RANGE_MIN","Xd");
   	define("DRINK_TYPES_OPTION_RANGE_MAX","Xe");
   	define("DRINK_TYPES_OPTION_COST","Xf");
   	define("DRINK_TYPES_OPTION_CHARGE_EACH","Xg");	
   	
   	// DRINK TYPES DEFAULT OPTIONS
   	define("DRINK_TYPES_DEFAULT_OPTION_LIST_TAG","dt_dol");
   	define("DRINK_TYPES_DEFAULT_OPTION_TAG","dt_do"); 
   	define("DRINK_TYPES_DEFAULT_OPTION_DT_ID","dt_do_dt");
   	define("DRINK_TYPES_DEFAULT_OPTION_OPT_GROUP","dt_do_og");
   	define("DRINK_TYPES_DEFAULT_OPTION_OPT_VALUE_ID","dt_do_ov");
   	define("DRINK_TYPES_DEFAULT_OPTION_COUNT","dt_do_oc");
   	
   	
   	// DRINK TYPES MAND OPTIONS
   	define("DRINK_TYPES_MAND_OPTION_LIST_TAG","dt_mol");
   	define("DRINK_TYPES_MAND_OPTION","dt_mo");
   	
   	define("DRINK_TYPES_MAND_OPTION_DT_ID","dt_mo_dt");
   	define("DRINK_TYPES_MAND_OPTION_DOG_ID","dt_mo_dog");
   
   	// Things that are different up to server than down ? ugly
   	define("SER_USER_DRINK_OPTIONS","s_udos");
   	
// Credit card types
    define("CARD_TYPE_UKNOWN",0);
    define("CARD_TYPE_MC", 1); 
    define("CARD_TYPE_VS", 2);  
    define("CARD_TYPE_AX", 3); 
    define("CARD_TYPE_DC", 4);  
    define("CARD_TYPE_DS", 5);  
    define("CARD_TYPE_JC", 6);   
    
    define ("ORDER_RECEIVED",1);
    define ("ORDER_INPROGRESS",2);
    define ("ORDER_DELIVERED",3);
    define ("ORDER_REFUNDED",4);
    define ("ORDER_NOSHOW",5);
    define ("ORDER_CANCELLED",6);
    
    define ("USER_DRINKS_TAG","u_ds");
    
    // Used to ensure editing is not updating an old version
    define("INCARNATION_ATTR","i_n");
    
    define("ORDER_PDF_PATH_PREFIX","order_pdfs/");
    define("ORDER_PDF_FILE_PREFIX","order_");
    
    define("ORDER_PDF_WIDTH_INCHES",2);
    define("ORDER_PDF_HEIGHT_INCHES",1);
    
    define("ORDER_EMAIL","nick.a.ambrose@gmail.com");
    define("FEEDBACK_EMAIL","nick.a.ambrose@gmail.com");
    
    // Orders
  
    define("OM_ORDER_HIGHEST_TIMESTAMP_ATTR","ou_hts");
    define("OM_ORDER_HIGHEST_TAG_ATTR","ou_htag");
    
    define("USER_COMMAND_OM_GET_TODAYS_ORDERS_FOR_LOC","o_loc_today");
    define("USER_COMMAND_OM_GET_ORDERS_SINCE_TIMESTAMP","o_loc_after_ts");
    define("USER_COMMAND_OM_GET_ORDERS_SINCE_TAG","o_loc_after_tag");
    
    define("ORDER_LIST_TAG","o_l");
    
    define("USER_ORDER_HERE_RESPONSE_TAG","user_order_here_response");
    
    define("ORDER_ID_ATTR","order_id");
    define("ORDER_UPDATED_TAG","order_updated");
    
    define("ORDER_TAG","o"); 
    define("ORDER_USER_ID_ATTR","o_u_id"); 
    define("ORDER_START_TIME_ATTR","o_st");
    define("ORDER_TIME_TO_LOCATION_ATTR","o_ttl");
    define("ORDER_END_TIME_ATTR","o_et"); 
    define("ORDER_DISPOSITION_ATTR","o_d");
    define("ORDER_DISPOSITION_TEXT_ATTR","o_dt");
    define("ORDER_TOTAL_COST_ATTR","o_tc");
    define("ORDER_USER_EMAIL_ATTR","o_ue");
    define("ORDER_USER_NAME_ATTR","o_un");
    define("ORDER_USER_TIME_HERE_ATTR","o_uth"); 
    define("ORDER_LOCATION_ID_ATTR","o_li");
    define("ORDER_TIME_NEEDED_ATTR","o_tn");
    define("ORDER_USER_CAR_INFO","u_uc");
    define("ORDER_USER_TAG","o_ut");
    define("ORDER_USER_IS_DEMO_ATTR","o_ud");
    define("ORDER_USER_CLIENT_TYPE_ATTR","o_ct");
    define("ORDER_ARRIVE_MODE_ATTR","o_am");
    			
    define("ORDER_ITEMS_TOTAL_ATTR","o_it");
    define("ORDER_DISCOUNT_ATTR","o_disc");
    define("ORDER_TIP_ATTR","o_tip");
    define("ORDER_PAY_METHOD_ATTR","o_pm");
    define("ORDER_GLOBAL_ORDER_TAG_ATTR","o_gt");
    define("ORDER_IS_TAXABLE_ATTR","o_tx");
    define("ORDER_TAXABALE_AMOUNT_ATTR","o_tx_amt");
    define("ORDER_TAX","o_tx_tax");
    define("ORDER_TAX_RATE","o_tx_rt");
    define("ORDER_CONV_FEE_ATTR","o_conv");
    		
    // Order Credit Cards
    define("ORDER_CREDIT_CARD_TAG","o_cc");
   	define("ORDER_CREDIT_CARD_PROFILE_ID_ATTR","o_ccpf");
   	define("ORDER_CREDIT_CARD_PROVIDER_ID_ATTR","o_ccpo");
   	define("ORDER_CREDIT_CARD_TRANS_ID_ATTR","o_cctr");
   	
   	define("ORDER_CREDIT_CARD_AUTH_CODE","o_cca");
   	define("ORDER_CREDIT_CARD_REFUND_AUTH_CODE","o_ccra");
   	define("ORDER_CREDIT_CARD_CARD_TYPE", "o_cct");
   	define("ORDER_CREDIT_CARD_CARD_LAST4", "o_cc4");
   	define("ORDER_CREDIT_CARD_DESCR", "o_ccd");
   	
   	// User Time Here
   	define("OM_USER_TIME_HERE_LIST_TAG","o_thl");
   	define("OM_USER_TIME_HERE_TAG","o_th");
   	define("OM_USER_TIME_HERE_LOC_ID_ATTR","o_th_l");
   	define("OM_USER_TIME_HERE_ORDER_ID_ATTR","o_th_o");
   	define("OM_USER_TIME_HERE_TIME_HERE_ATTR","o_th_t");
   	
   	// REPORTS
   	define("COMMAND_REPORT","get_report");
   	define("REPORT_NUM_DAYS","report_num_days");
    
    // If these or the SORT_OPTIONS are changed, need to change
    // GenerateDrinkLongDescription to reflect this order (a tad lame but oh well)
    
    // TAGS
   	define("ALL_CAR_MODELS_TAG","all_car_models");
    
   	// ATTRS
   	define ("SORT_ORDER_SHORT_ATTR","so");
   			
    // ERRORS
    define ("ERROR_TAG","error");
	define ("ERROR_CODE_MAJOR","error_code_major");
	define ("ERROR_CODE_MINOR","error_code_minor");
	define ("ERROR_DISPLAY_TEXT","error_display_text");
	define ("ERROR_LONG_TEXT","error_long_text");
	
	define ("ALL_CAR_MAKES_TAG","all_car_makes");
	// Car make / model
	define ("CAR_MAKE_TAG","c_ma");
	define ("CAR_MAKE_LONG_DESCR_ATTR","c_ma_l");
	define ("CAR_MAKE_SHORT_DESCR_ATTR","c_ma_s");
	define ("CAR_MAKE_HAS_MODELS_ATTR","c_ma_h"); 
	
	define ("CAR_MODEL_TAG","c_mo");
	define ("CAR_MODEL_MAKE_ID_ATTR","c_mo_ma");
	define ("CAR_MODEL_LONG_DESCR_ATTR","c_mo_l");
	define ("CAR_MODEL_SHORT_DESCR_ATTR","c_mo_s");
	
	define("ALL_CAR_COLORS_TAG","all_car_colors");
	// Car Color
	define ("CAR_COLOR_TAG","car_color");
	define ("CAR_COLOR_LONG_DESCR_ATTR","c_co_l");
	define ("CAR_COLOR_SHORT_DESCR","c_co_s");
			
	
	
    // FOOD_DRINK_GENERAL
    
    define ("SHORT_DESCR","short_descr");
    define ("LONG_DESCR","long_descr");
    define ("SORT_ORDER","sort_order");
    define ("OPT_TYPE_ATTR","type");
    define ("OPT_LABEL_ATTR","label");
    define ("OPT_PICK_ATTR","pick");
    
    define ("OPT_PICK_ONE","one");
    define ("OPT_PICK_MANY","many");
    
   
    // ORDER RESPONSE
    define ("USER_ORDER_RESPONSE_LOCATION_PHONE_ATTR","location_phone");
    define ("USER_ORDER_RESPONSE_LOCATION_EMAIL_ATTR","location_email");
    
    // OM order drinks (separate than ORDER just so we break less stuff)
    define ("OM_ORDER_ITEM_LIST_TAG","om_ois");
    define ("OM_ORDER_ITEM_TAG","om_oi");
    
    define ("OM_ORDER_ITEM_DESCR_ATTR","om_oi_d");
    define ("OM_ORDER_ITEM_COST_ATTR","om_oi_c");

    
    define ("OM_INCARNATION_CMD_PARAM","incarnation");
    define("DRINK_TYPE_TYPE_ID_CMD_PARAM","d_t_it"); // Inherent type (Drink, Food, Candy etc.)
    
    define ("ORDER_DRINK_DESCR","order_drink_descr");
    define ("ORDER_DRINK_COST","order_drink_cost");
    
    // TIPS
    
    // TIPS COMMANDS
    define ("SET_USER_TIP_CMD","set_user_tip");
    define ("DELETE_USER_TIP_CMD","delete_user_tip");
    //define ("SET_USER_TIP_CMD_RESPONSE","set_user_tip_response");
    //define ("DELETE_USER_TIP_CMD_RESPONSE","delete_user_tip_response");
    
    // TIPS ATTRS/TAGS
    
    define ("USER_TIP_TYPE_NONE",0);
    define ("USER_TIP_TYPE_AMOUNT",1);
    define ("USER_TIP_TYPE_PERCENT",2);
    
    define ("USER_TIP_LIST_TAG","user_tip_list");
    define ("USER_TIP_TAG","user_tip");
    define ("USER_TIP_TYPE_ATTR","tip_type");
    define ("USER_TIP_AMOUNT_ATTR","tip_amt");
    define ("USER_TIP_ROUND_UP_ATTR","tip_rnd");
    		
    /**
     * Convert a number to locale independent string without E notation and without
     * loosing precision
     *
     * @param      int/float/double $fNumber The number to convert.
     * @return     string The locale independent converted number.
     */
    function bcconv($fNumber)
    {
    	$sAppend = '';
    	$iDecimals = ini_get('precision') - floor(log10(abs($fNumber)));
    	if (0 > $iDecimals)
    	{
    		$fNumber *= pow(10, $iDecimals);
    		$sAppend = str_repeat('0', -$iDecimals);
    		$iDecimals = 0;
    	}
    	return number_format($fNumber, $iDecimals, '.', '').$sAppend;
    }
    
            
?>
